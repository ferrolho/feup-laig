<!-- Os comentarios devem ter espacos no inicio e no fim, para   -->
<!--    separar dos hifens                                       -->
<!-- Nao devem ser usados caracteres especiais (p.ex. acentos)   -->
<!-- Todas as tags e atributos sao obrigatorios, exceto onde for -->
<!--    referido o contrario                                     -->
<!-- Os identificadores "id" nao devem ser repetidos, pelo       -->
<!--    menos em entidades do mesmo tipo                         -->

<anf>
    <!-- bloco de configuracoes globais -->
    <!-- a declaracao dos componentes deste bloco e' obrigatoria --> 
    <globals>
        <!-- Parametros de desenho -->
        <!-- Valores para mode: "fill", "line", "point" -->
        <!-- Valores para shading: "flat", "gouraud" ) -->
        <drawing mode="ss" shading="ss" background="ff ff ff ff" />
 
        <!-- Parametros de culling -->
        <!-- Valores para cullface: "none", "back" , "front" ou "both" -->
        <!-- Valores para cullorder : "ccw" ou "cw" -->
        <culling face="ss" order="ss" />
 
        <!-- Parametros de iluminacao; seguem os parametros do OpenGL  -->
        <lighting doublesided="tt" local="tt" enabled="tt" ambient="ff ff ff ff" />
 
    </globals>
    
    <!-- bloco de camaras: o atributo "initial" identifica a camara/ponto de vista inicial, que tem de existir -->
    <cameras initial="ss" >
        <!-- tem de existir, pelo menos uma camara dos tipos seguintes (perspective ou ortho) -->
        <!-- no caso da camara ortho, o atributo "direction" define o eixo segundo o qual se efetua a projecao -->

        <perspective id="ss" near="ff" far="ff" angle="ff" pos="ff ff ff" target="ff ff ff" />
        <ortho id="ss" direction="ee" near="ff" far="ff" left="ff" right="ff" top="ff" bottom="ff" />
    </cameras>
  
    <!-- bloco de luzes -->
    <lights>
            <!-- Deve existir pelo menos uma luz declarada -->
            <!-- Atributo "marker" indica se deve ou nao desenhar-se uma esfera representativa -->
            <light id="ss" type="omni" enabled="tt" marker="tt" pos="ff ff ff" >
               <component type="ambient" value="ff ff ff ff" />
               <component type="diffuse" value="ff ff ff ff" />
               <component type="specular" value="ff ff ff ff" />

            </light>

            <light id="ss" type="spot" enabled="tt" marker="tt" pos="ff ff ff" target="ff ff ff"  
                angle="ff" exponent="ff" >

               <component type="ambient" value="ff ff ff ff" />
               <component type="diffuse" value="ff ff ff ff" />
               <component type="specular" value="ff ff ff ff" />

            </light>
    </lights>

    <!-- bloco de texturas. Este bloco tem de existir mas pode estar vazio, se nao forem usadas texturas -->
    <!--   ver topico 'Notas finais' no enunciado sobre os parametros texlength_... -->
    <textures>       
          <texture id="ss" file="ss" texlength_s="ff" texlength_t="ff" />
    </textures>

    <!-- bloco de materiais; -->
    <appearances>
        <!-- deve existir um ou mais blocos "appearance" -->
        <!-- IMPORTANTE: -->
        <!--   textureref e opcional, a utilizar caso haja textura associada a esta aparencia --> 
        <appearance id="ss" shininess="ff" textureref="ss" >
               <component type="ambient" value="ff ff ff ff" />
               <component type="diffuse" value="ff ff ff ff" />
               <component type="specular" value="ff ff ff ff" />
        </appearance>
    </appearances>

    <!-- bloco do grafo; "rootid" identifica o no de raiz -->
    <graph rootid="ss">
        <!-- tem de existir, pelo menos, um bloco "node" -->
        <node id="ss">
            <!-- bloco "transforms" obrigatorio -->
            <transforms>
                <!-- deve conter transformacoes explicitas usando as instrucoes seguintes sem limite nem ordem -->
                <!-- ex: bloco transforms pode ficar sem conteudo -->
                <!-- ex: bloco transforms pode ser R,T (nao tem S) -->
                <!-- ex: bloco transforms pode ser R,S,T,S -->
                <transform type="translate" to="ff ff ff" />
                <transform type="rotate" axis="ee" angle="ff" />
                <transform type="scale" factor="ff ff ff" />
            </transforms>
          
            <!-- declaracao da aparencia a utilizar -->
            <!-- se id="inherit", o no' mantem (herda) a aparencia do "pai" -->

            <appearanceref id="ss" />
 
                              
             <!-- conteudo do no; deve existir pelo menos um bloco "primitives" ou um "descendants" -->
             <!-- podem existir ambos -->

             <!-- bloco "primitives" --> 
            <primitives>
                <!-- podem existir varias primitivas -->

                <!-- Primitivas : rectangle, triangle, cylinder, sphere, torus -->
                <!--   Comandos a serem interpretados genericamente como em OpenGL/GLUT, exceto -->
                <!--   o cilindro, que deve adicionalmente ter topos ou tampas) -->            
                <rectangle xy1="ff ff" xy2="ff ff" />
                <triangle xyz1="ff ff ff" xyz2="ff ff ff" xyz3="ff ff ff" />
                <cylinder base="ff" top="ff" height="ff" slices="ii" stacks="ii" />      <!-- deve ter topos -->
                <sphere radius="ff" slices="ii" stacks="ii" />
                <torus inner="ff" outer="ff" slices="ii" loops="ii" />
             </primitives>
               
             <!-- bloco "descendants" -->
            <descendants>
                <!-- Referencia a outros elementos do grafo -->
                <!-- (repetir o no. de vezes necessario) -->
                <!-- LEMBRANDO: qualquer no' pode ser referenciado previamente 'a sua declaracao; isto -->
                <!--            e', a ordem pela qual os nos sao declarados e' irrelevante -->
                <noderef id="ss" />
            </descendants>
        </node>
    </graph>
</anf>
